{"version":3,"sources":["VolumeForm.js","App.js","serviceWorker.js","index.js"],"names":["VolumeForm","props","state","units","results","resultsDom","shape","radius","height","handleChange","bind","handleUnitsChange","handleShapeChange","handleRadiusChange","handleHeightChange","handleSubmit","event","this","setState","target","value","preventDefault","parseFloat","volume","Math","PI","pow","result","toFixed","push","console","log","resultsList","map","l","border","alert","parameter","onChange","onSubmit","type","checked","hidden","className","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ade45a85.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass VolumeForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          units: 'English',\r\n          results: [],\r\n          resultsDom: null,\r\n          shape: '',\r\n          radius: 0,\r\n          height: 0,\r\n        };\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleUnitsChange = this.handleUnitsChange.bind(this);\r\n      this.handleShapeChange = this.handleShapeChange.bind(this);\r\n      this.handleRadiusChange = this.handleRadiusChange.bind(this);\r\n      this.handleHeightChange = this.handleHeightChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    handleChange(event) {\r\n        this.setState({units: event.target.value});\r\n    }\r\n\r\n    handleShapeChange(event) {\r\n        this.setState({shape: event.target.value});\r\n    }\r\n\r\n    handleUnitsChange(event) {\r\n        this.setState({units: event.target.value});\r\n    }\r\n    \r\n    handleRadiusChange(event) {\r\n        this.setState({radius: (event.target.value)});\r\n    }\r\n    \r\n    handleHeightChange(event) {\r\n        this.setState({height: (event.target.value)});\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        let shape = this.state.shape;\r\n        if (shape === '') {\r\n            alert(\"You haven't select the shape!\");\r\n            return;\r\n        }\r\n        let radius = parseFloat(this.state.radius);\r\n        let height = parseFloat(this.state.height);\r\n        let units = this.state.units === \"English\"? \"(ft)\" :\"(m)\";\r\n        let results = this.state.results;\r\n        let volume = ((shape === \"Sphere\")\r\n            ? 4 / 3 * Math.PI * Math.pow(radius, 3)\r\n            : (shape === \"Cone\")\r\n                ? 1 / 3 * Math.PI * Math.pow(radius, 2) * height\r\n                : Math.PI * Math.pow(radius, 2) * height);\r\n        volume = volume.toFixed(2);\r\n        let result = [\r\n            shape,\r\n            radius + units,\r\n            (shape === \"Sphere\"? \"-\":height + units),\r\n            volume + units\r\n        ]\r\n        results.push(result);\r\n        this.setState({results: results});\r\n        console.log(result);\r\n        let resultsList = results.map(\r\n            l => (\r\n                <tr>\r\n                <th>{l[0]}</th>\r\n                <th>{l[1]}</th>\r\n                <th>{l[2]}</th>\r\n                <th>{l[3]}</th>\r\n                </tr>\r\n            )\r\n        )\r\n        let resultsDom = (\r\n            <center>\r\n                <table border=\"1\">\r\n                    <tr>\r\n                    <th>Shape</th>\r\n                    <th>Radius</th>\r\n                    <th>Height</th>\r\n                    <th>Volume</th>\r\n                    </tr>\r\n                    {resultsList}\r\n                </table>\r\n            </center>\r\n        )\r\n        this.setState({ resultsDom: resultsDom })\r\n    }\r\n  \r\n    render() {\r\n        let parameter = null;\r\n        if (this.state.shape === \"Sphere\") {\r\n            parameter = <div>\r\n                Enter the radius: <input value={this.state.radius} onChange={this.handleRadiusChange}/>\r\n            </div>\r\n        } else if (this.state.shape === \"Cone\" || this.state.shape === \"Cylinder\"){\r\n            parameter = (<div>\r\n                <div>\r\n                    Enter the radius: <input value={this.state.radius} onChange={this.handleRadiusChange}/>\r\n                </div>\r\n                <div>\r\n                    Enter the height: <input value={this.state.height} onChange={this.handleHeightChange}/>\r\n                </div>\r\n            </div>)\r\n        }\r\n        return (\r\n            <div>\r\n                <h1>Volume Calculator</h1>\r\n                <h2>Input</h2>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    Select the units (English or SI):\r\n                    <div>\r\n                        <input type=\"radio\" value=\"English\" checked={this.state.units === \"English\"}\r\n                            onChange={this.handleUnitsChange}/>English\r\n                        <input type=\"radio\" value=\"SI\" checked={this.state.units === \"SI\"}\r\n                            onChange={this.handleUnitsChange}/>SI\r\n                    </div>\r\n                    Select the shape {\" \"}\r\n                    <select value={this.state.shape} onChange={this.handleShapeChange}>\r\n                        <option value=\"\" hidden></option>\r\n                        <option value=\"Cylinder\">Cylinder</option>\r\n                        <option value=\"Sphere\">Sphere</option>\r\n                        <option value=\"Cone\">Cone</option>\r\n                    </select>\r\n                    {parameter}\r\n                    <div>\r\n                        <button className=\"submit\">Submit</button>\r\n                    </div>\r\n                </form>\r\n                <h2>Results</h2>\r\n                <p>You selected to use {this.state.units} units.</p>\r\n                <p>{(this.state.shape === '')\r\n                    ? 'You haven\\'t selected the shape.' \r\n                    : 'You selected to find the values for a ' + this.state.shape +' shape.'}\r\n                </p>\r\n                {this.state.resultsDom}\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n\r\n  export default VolumeForm;","import React from 'react';\nimport './App.css';\nimport VolumeForm from './VolumeForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VolumeForm> </VolumeForm>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}